{
    "sourceFile": "config/permission.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1727925156927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727925193886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n          * The model you want to use as a Permission model needs to implement the\n          * `Spatie\\Permission\\Contracts\\Permission` contract.\n          */\n \n-         'user' => App\\Models\\User::class,\n+        'user' => App\\Models\\User::class,\n \n         'permission' => Spatie\\Permission\\Models\\Permission::class,\n \n         /*\n"
                }
            ],
            "date": 1727925156927,
            "name": "Commit-0",
            "content": "<?php\n\nreturn [\n\n    'models' => [\n\n        /*\n         * When using the \"HasPermissions\" trait from this package, we need to know which\n         * Eloquent model should be used to retrieve your permissions. Of course, it\n         * is often just the \"Permission\" model but you may use whatever you like.\n         *\n         * The model you want to use as a Permission model needs to implement the\n         * `Spatie\\Permission\\Contracts\\Permission` contract.\n         */\n\n         'user' => App\\Models\\User::class,\n\n        'permission' => Spatie\\Permission\\Models\\Permission::class,\n\n        /*\n         * When using the \"HasRoles\" trait from this package, we need to know which\n         * Eloquent model should be used to retrieve your roles. Of course, it\n         * is often just the \"Role\" model but you may use whatever you like.\n         *\n         * The model you want to use as a Role model needs to implement the\n         * `Spatie\\Permission\\Contracts\\Role` contract.\n         */\n\n        'role' => Spatie\\Permission\\Models\\Role::class,\n\n    ],\n\n    'table_names' => [\n\n        /*\n         * When using the \"HasRoles\" trait from this package, we need to know which\n         * table should be used to retrieve your roles. We have chosen a basic\n         * default value but you may easily change it to any table you like.\n         */\n\n        'roles' => 'roles',\n\n        /*\n         * When using the \"HasPermissions\" trait from this package, we need to know which\n         * table should be used to retrieve your permissions. We have chosen a basic\n         * default value but you may easily change it to any table you like.\n         */\n\n        'permissions' => 'permissions',\n\n        /*\n         * When using the \"HasPermissions\" trait from this package, we need to know which\n         * table should be used to retrieve your models permissions. We have chosen a\n         * basic default value but you may easily change it to any table you like.\n         */\n\n        'model_has_permissions' => 'model_has_permissions',\n\n        /*\n         * When using the \"HasRoles\" trait from this package, we need to know which\n         * table should be used to retrieve your models roles. We have chosen a\n         * basic default value but you may easily change it to any table you like.\n         */\n\n        'model_has_roles' => 'model_has_roles',\n\n        /*\n         * When using the \"HasRoles\" trait from this package, we need to know which\n         * table should be used to retrieve your roles permissions. We have chosen a\n         * basic default value but you may easily change it to any table you like.\n         */\n\n        'role_has_permissions' => 'role_has_permissions',\n    ],\n\n    'column_names' => [\n        /*\n         * Change this if you want to name the related pivots other than defaults\n         */\n        'role_pivot_key' => null, //default 'role_id',\n        'permission_pivot_key' => null, //default 'permission_id',\n\n        /*\n         * Change this if you want to name the related model primary key other than\n         * `model_id`.\n         *\n         * For example, this would be nice if your primary keys are all UUIDs. In\n         * that case, name this `model_uuid`.\n         */\n\n        'model_morph_key' => 'model_id',\n\n        /*\n         * Change this if you want to use the teams feature and your related model's\n         * foreign key is other than `team_id`.\n         */\n\n        'team_foreign_key' => 'team_id',\n    ],\n\n    /*\n     * When set to true, the method for checking permissions will be registered on the gate.\n     * Set this to false if you want to implement custom logic for checking permissions.\n     */\n\n    'register_permission_check_method' => true,\n\n    /*\n     * When set to true, Laravel\\Octane\\Events\\OperationTerminated event listener will be registered\n     * this will refresh permissions on every TickTerminated, TaskTerminated and RequestTerminated\n     * NOTE: This should not be needed in most cases, but an Octane/Vapor combination benefited from it.\n     */\n    'register_octane_reset_listener' => false,\n\n    /*\n     * Teams Feature.\n     * When set to true the package implements teams using the 'team_foreign_key'.\n     * If you want the migrations to register the 'team_foreign_key', you must\n     * set this to true before doing the migration.\n     * If you already did the migration then you must make a new migration to also\n     * add 'team_foreign_key' to 'roles', 'model_has_roles', and 'model_has_permissions'\n     * (view the latest version of this package's migration file)\n     */\n\n    'teams' => false,\n\n    /*\n     * Passport Client Credentials Grant\n     * When set to true the package will use Passports Client to check permissions\n     */\n\n    'use_passport_client_credentials' => false,\n\n    /*\n     * When set to true, the required permission names are added to exception messages.\n     * This could be considered an information leak in some contexts, so the default\n     * setting is false here for optimum safety.\n     */\n\n    'display_permission_in_exception' => false,\n\n    /*\n     * When set to true, the required role names are added to exception messages.\n     * This could be considered an information leak in some contexts, so the default\n     * setting is false here for optimum safety.\n     */\n\n    'display_role_in_exception' => false,\n\n    /*\n     * By default wildcard permission lookups are disabled.\n     * See documentation to understand supported syntax.\n     */\n\n    'enable_wildcard_permission' => false,\n\n    /*\n     * The class to use for interpreting wildcard permissions.\n     * If you need to modify delimiters, override the class and specify its name here.\n     */\n    // 'permission.wildcard_permission' => Spatie\\Permission\\WildcardPermission::class,\n\n    /* Cache-specific settings */\n\n    'cache' => [\n\n        /*\n         * By default all permissions are cached for 24 hours to speed up performance.\n         * When permissions or roles are updated the cache is flushed automatically.\n         */\n\n        'expiration_time' => \\DateInterval::createFromDateString('24 hours'),\n\n        /*\n         * The cache key used to store all permissions.\n         */\n\n        'key' => 'spatie.permission.cache',\n\n        /*\n         * You may optionally indicate a specific cache driver to use for permission and\n         * role caching using any of the `store` drivers listed in the cache.php config\n         * file. Using 'default' here means to use the `default` set in cache.php.\n         */\n\n        'store' => 'default',\n    ],\n];"
        }
    ]
}